<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Adam.JSGenerator</name>
    </assembly>
    <members>
        <member name="T:Adam.JSGenerator.ThrowStatement">
            <summary>
            Defines a throw statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.Statement">
            <summary>
            Provides the base class for all Javascript statements.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Statement.AppendRequiredTerminator(System.Text.StringBuilder)">
            <summary>
            Helper method that appends a terminating semicolon to the StringBuilder, if this object requires one.
            </summary>
            <param name="builder">The StringBuilder to apply a terminating semicolon to.</param>
        </member>
        <member name="M:Adam.JSGenerator.Statement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords">Indicate to the statement/expression that the use of reserved words is allowed.</param>
        </member>
        <member name="M:Adam.JSGenerator.Statement.ToString(System.Boolean,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Converts the object to a string containing the JavaScript that it represents.
            </summary>
            <param name="includeTerminator">If true, a statement terminator is appended if required.</param>
            <param name="options">The options to use when generating JavaScript.</param>
            <param name="allowReservedWords">Indicate to the statement/expression that the use of reserved words is allowed.</param>
            <returns>A string containing the JavaScript that it represents.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Statement.ToString(System.Boolean)">
            <summary>
            Converts the object to a string containing the JavaScript that it represents.
            </summary>
            <param name="includeTerminator">If true, a statement terminator is appended if required.</param>
            <returns>A string containing the JavaScript that it represents.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Statement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Adam.JSGenerator.Statement.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified object.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Statement.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.Statement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ThrowStatement.#ctor(Adam.JSGenerator.Expression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ThrowStatement"/>.
            </summary>
            <param name="expression">The expression whose value is thrown.</param>
        </member>
        <member name="M:Adam.JSGenerator.ThrowStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ThrowStatement.Expression">
            <summary>
            Gets or sets the expression whose value is thrown.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ThrowStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.LabelStatement">
            <summary>
            Defines a label statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.LabelStatement.#ctor(Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.LabelStatement"/> that precedes the specified statement with a label.
            </summary>
            <param name="name">The name of the label.</param>
            <param name="statement">The statement to precede.</param>
        </member>
        <member name="M:Adam.JSGenerator.LabelStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.LabelStatement.Name">
            <summary>
            Gets or sets the name of the label.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.LabelStatement.Statement">
            <summary>
            Gets or sets the statement to precede.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.FunctionExpression">
            <summary>
            Defines a function expression.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.Expression">
            <summary>
            The base class to all forms of expressions.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Expression.op_Implicit(System.Boolean)~Adam.JSGenerator.Expression">
            <summary>
            Converts a Boolean into a <see cref="T:Adam.JSGenerator.BooleanExpression"/> that represents its value.
            </summary>
            <param name="value">The Boolean to convert.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.BooleanExpression"/> that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromBoolean(System.Boolean)">
            <summary>
            Converts a Boolean into a <see cref="T:Adam.JSGenerator.BooleanExpression"/> that represents its value.
            </summary>
            <param name="value">The Boolean to convert.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.BooleanExpression"/> that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.op_Implicit(System.Int32)~Adam.JSGenerator.Expression">
            <summary>
            Converts an integer into a <see cref="T:Adam.JSGenerator.NumberExpression"/> that represents its value.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>The LiteralExpression object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromInteger(System.Int32)">
            <summary>
            Converts an integer into a <see cref="T:Adam.JSGenerator.NumberExpression"/> that represents its value.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>The <see cref="T:Adam.JSGenerator.NumberExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.op_Implicit(System.Double)~Adam.JSGenerator.Expression">
            <summary>
            Converts a double into a <see cref="T:Adam.JSGenerator.NumberExpression"/> that represents its value.
            </summary>
            <param name="value">The double to convert.</param>
            <returns>The <see cref="T:Adam.JSGenerator.NumberExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromDouble(System.Double)">
            <summary>
            Converts a double into a <see cref="T:Adam.JSGenerator.NumberExpression"/> that represents its value.
            </summary>
            <param name="value">The double to convert.</param>
            <returns>The <see cref="T:Adam.JSGenerator.NumberExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.op_Implicit(System.String)~Adam.JSGenerator.Expression">
            <summary>
            Converts a string into a <see cref="T:Adam.JSGenerator.StringExpression"/> that represents its value.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The <see cref="T:Adam.JSGenerator.StringExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromString(System.String)">
            <summary>
            Converts a string into a <see cref="T:Adam.JSGenerator.StringExpression"/> that represents its value.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The <see cref="T:Adam.JSGenerator.StringExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.op_Implicit(System.Array)~Adam.JSGenerator.Expression">
            <summary>
            Converts an array into a <see cref="T:Adam.JSGenerator.ArrayExpression"/> that represents its value.
            </summary>
            <param name="array">The array to convert</param>
            <returns>The <see cref="T:Adam.JSGenerator.ArrayExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromArray(System.Array)">
            <summary>
            Converts an array into a <see cref="T:Adam.JSGenerator.ArrayExpression"/> that represents its value.
            </summary>
            <param name="array">The array to convert</param>
            <returns>The <see cref="T:Adam.JSGenerator.ArrayExpression"/> object that represents its value.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Expression.FromObject(System.Object)">
            <summary>
            Converts any object into an <see cref="T:Adam.JSGenerator.Expression"/> object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Adam.JSGenerator.Expression.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.Expression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpression.#ctor(Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.IdentifierExpression[])">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> with the specified name and parameters.
            </summary>
            <param name="name">The name of the function, if not anonymous.</param>
            <param name="parameters">The parameters that the function expects.</param>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpression.#ctor(Adam.JSGenerator.IdentifierExpression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.IdentifierExpression},Adam.JSGenerator.CompoundStatement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> for the specified name, parameters and body.
            </summary>
            <param name="name">The name of the function, if not anonymous.</param>
            <param name="parameters">The parameters that the function expects.</param>
            <param name="body">The body of the function.</param>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.FunctionExpression.Name">
            <summary>
            Gets or sets the name of the function. Specify null for an anonymous function.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.FunctionExpression.Parameters">
            <summary>
            Gets or sets the list of parameters for the function.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.FunctionExpression.Body">
            <summary>
            Gets or sets the body of the function.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.FunctionExpression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.EmptyStatement">
            <summary>
            Represents the empty statement. Only a terminating semicolon is produced.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.EmptyStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.EmptyStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.CallOperationExpression">
            <summary>
            Represents a call operation on an expression.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CallOperationExpression.#ctor(Adam.JSGenerator.Expression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of the CallOperationExpression class, 
            calling on the provided operand with the optionally supplied arguments.
            </summary>
            <param name="operand">The expression on which to apply the call operation.</param>
            <param name="arguments">The arguments to pass in the call.</param>
        </member>
        <member name="M:Adam.JSGenerator.CallOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of the CallOperationExpression class, 
            calling on the provided operand with the optionally supplied arguments.
            </summary>
            <param name="operand">The expression on which to apply the call operation.</param>
            <param name="arguments">The arguments to pass in the call.</param>
        </member>
        <member name="M:Adam.JSGenerator.CallOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.CallOperationExpression.Operand">
            <summary>
            Gets or sets the expression on which to apply the call operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.CallOperationExpression.Arguments">
            <summary>
            Gets or sets the list of arguments to pass.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.CallOperationExpression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.NullExpression">
            <summary>
            Represents a "null" value in JavaScript.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.NullExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="T:Adam.JSGenerator.PropertyOperationExpressionHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.PropertyOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.PropertyOperationExpressionHelpers.Dot(Adam.JSGenerator.Expression,Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.PropertyOperationExpression"/> that performs a property operation on the specified expression.
            </summary>
            <param name="expression">The expression on which to perform the property operation.</param>
            <param name="member">The property to access.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.PropertyOperationExpression"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.DeclarationExpression">
            <summary>
            Defines a declaration expression (e.g. 'var').
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.DeclarationExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.DeclarationExpression.#ctor(Adam.JSGenerator.Expression[])">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/> that declares the specified expressions.
            </summary>
            <param name="expressions">An array of expression to declare.</param>
        </member>
        <member name="M:Adam.JSGenerator.DeclarationExpression.#ctor(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/> that declares the specified expressions.
            </summary>
            <param name="expressions">A sequence of expression to declare.</param>
        </member>
        <member name="M:Adam.JSGenerator.DeclarationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.DeclarationExpression.Expressions">
            <summary>
            Gets or sets a list of expressions to declare.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ArrayExpression">
            <summary>
            Defines an expression that represents an array.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ArrayExpression.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Adam.JSGenerator.ArrayExpression"/> class.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ArrayExpression.#ctor(Adam.JSGenerator.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.ArrayExpression"/> class using the specified elements.
            </summary>
            <param name="elements">An array of expressions to add to the Array.</param>
        </member>
        <member name="M:Adam.JSGenerator.ArrayExpression.#ctor(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.ArrayExpression"/> class using the specified elements.
            </summary>
            <param name="elements">A sequence of expressions to add to the Array.</param>
        </member>
        <member name="M:Adam.JSGenerator.ArrayExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ArrayExpression.Elements">
            <summary>
            Gets the list of elements that make up the array.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.UnaryOperationExpression">
            <summary>
            Contains an unary operation.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.UnaryOperator)">
            <summary>
            Creates a new instance of the UnaryOperation class.
            </summary>
            <param name="operand">The operand.</param>
            <param name="op">The operator.</param>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.UnaryOperationExpression.Operand">
            <summary>
            Gets or sets the operand for this unary operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.UnaryOperationExpression.Operator">
            <summary>
            Gets or sets the operator for this unary operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.UnaryOperationExpression.PrecedenceLevel">
            <summary>
            Gets a value indicating the precedence level of this expression.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.IteratorStatement">
            <summary>
            Defines an interating for-loop. (for (var v in c))
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/> for the specified variable, collection and statement.
            </summary>
            <param name="variable">The variable that holds the item for an iteration.</param>
            <param name="collection">The collection on which to iterate.</param>
            <param name="statement">The statement to run on each iteration.</param>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.IteratorStatement.Variable">
            <summary>
            Gets or sets the variable that holds the value of the iteration.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.IteratorStatement.Collection">
            <summary>
            Gets or sets the collection that is iterated on.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.IteratorStatement.Statement">
            <summary>
            Gets or sets the statement that is run on each iteration.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.LabelStatementHelpers">
            <summary>
            Provides extension methods for creating new instances of <see cref="T:Adam.JSGenerator.LabelStatement"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.LabelStatementHelpers.Labeled(Adam.JSGenerator.Statement,Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Precedes a statement with a new instance of <see cref="T:Adam.JSGenerator.LabelStatement"/> that adds the specified label.
            </summary>
            <param name="statement">The statement to precede.</param>
            <param name="expression">The label to add.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.LabelStatement"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.IndexOperationExpressionHelpers">
            <summary>
            Provides extension methods to work with instances of <see cref="T:Adam.JSGenerator.IndexOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IndexOperationExpressionHelpers.Index(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.IndexOperationExpression"/> that performs an index operation.
            </summary>
            <param name="expression">An expression to perform an index operation on.</param>
            <param name="operand">The index to retrieve.</param>
            <returns></returns>
        </member>
        <member name="T:Adam.JSGenerator.ExceptionHandlingStatementHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Catch(Adam.JSGenerator.ExceptionHandlingStatement,Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> from the specified statement, and adding the specified expression and statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> properties.</param>
            <param name="expression">The expression to set in the Catch block.</param>
            <param name="statements"> An array of statements to add to the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Catch(Adam.JSGenerator.ExceptionHandlingStatement,Adam.JSGenerator.IdentifierExpression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> from the specified statement, and adding the specified expression and statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> properties.</param>
            <param name="expression">The expression to set in the Catch block.</param>
            <param name="statements">A sequence of statements to add to the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Catch(Adam.JSGenerator.ExceptionHandlingStatement,Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.CompoundStatement)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> from the specified statement, and adding the specified expression and statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/> properties.</param>
            <param name="expression">The expression to set in the Catch block.</param>
            <param name="block">The block to use as the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Finally(Adam.JSGenerator.ExceptionHandlingStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/>, <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchVariable"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> from the specified statement, and adding the specified statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> properties.</param>
            <param name="statements">An array of statements to add to the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Finally(Adam.JSGenerator.ExceptionHandlingStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/>, <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchVariable"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> from the specified statement, and adding the specified statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> properties.</param>
            <param name="statements">A sequence of statements to add to the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatementHelpers.Finally(Adam.JSGenerator.ExceptionHandlingStatement,Adam.JSGenerator.CompoundStatement)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> by copying the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/>, <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchVariable"/> 
            and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> from the specified statement, and adding the specified statements to the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock"/>.
            </summary>
            <param name="statement">The statement from which to copy the <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock"/> and <see cref="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock"/> properties.</param>
            <param name="block">The block to use as the Catch block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.DoWhileStatementHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.DoWhileStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.DoWhileStatementHelpers.While(Adam.JSGenerator.DoWhileStatement,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/> and adds a condition.
            </summary>
            <param name="whileStatement">The existing instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/> to copy the <see cref="P:Adam.JSGenerator.DoWhileStatement.Statement"/> from.</param>
            <param name="condition">The condition to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.ConditionalStatementHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatementHelpers.Then(Adam.JSGenerator.ConditionalStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a copy of the specified instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> and adds a then statement.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> to copy the <see cref="P:Adam.JSGenerator.ConditionalStatement.Parent"/>, 
            <see cref="P:Adam.JSGenerator.ConditionalStatement.Condition"/> and <see cref="P:Adam.JSGenerator.ConditionalStatement.ElseStatement"/> from.</param>
            <param name="statements">An array of statements to add to the then block of the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatementHelpers.Then(Adam.JSGenerator.ConditionalStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a copy of the specified instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> and adds a then statement.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> to copy the <see cref="P:Adam.JSGenerator.ConditionalStatement.Parent"/>, 
            <see cref="P:Adam.JSGenerator.ConditionalStatement.Condition"/> and <see cref="P:Adam.JSGenerator.ConditionalStatement.ElseStatement"/> from.</param>
            <param name="statements">A sequence of statements to add to the then block of the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatementHelpers.Else(Adam.JSGenerator.ConditionalStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a copy of the specified instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> and adds a then statement.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> to copy the <see cref="P:Adam.JSGenerator.ConditionalStatement.Parent"/>, 
            <see cref="P:Adam.JSGenerator.ConditionalStatement.Condition"/> and <see cref="P:Adam.JSGenerator.ConditionalStatement.ThenStatement"/> from.</param>
            <param name="statements">An array of statements to add to the then block of the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatementHelpers.Else(Adam.JSGenerator.ConditionalStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a copy of the specified instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> and adds a then statement.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> to copy the <see cref="P:Adam.JSGenerator.ConditionalStatement.Parent"/>, 
            <see cref="P:Adam.JSGenerator.ConditionalStatement.Condition"/> and <see cref="P:Adam.JSGenerator.ConditionalStatement.ThenStatement"/> from.</param>
            <param name="statements">A sequence of statements to add to the then block of the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatementHelpers.ElseIf(Adam.JSGenerator.ConditionalStatement,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> that forms an else-if condition after the specified condition. 
            </summary>
            <param name="statement">The conditional to which to add an else-if condition to.</param>
            <param name="condition">The condition to test.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
            <remarks>
            This produces a new instance, and has no side effects on the existing statement (as all of the helpers are designed to) but
            it does refer to the existing instance. Therefore, there may be undesired effects when the original is somehow modified.
            However, in the typical use case (a fluent description of the conditional statement) there is no such problem.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.CollectionHelpers">
            <summary>
            Provides extension methods to work with sequences.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CollectionHelpers.WithConvertedNulls(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that replaces null elements in the specified sequence with instances of <see cref="T:Adam.JSGenerator.EmptyStatement"/>.
            </summary>
            <param name="query">The sequence to filter.</param>
            <returns>A sequence of statements.</returns>
        </member>
        <member name="M:Adam.JSGenerator.CollectionHelpers.WithConvertedNulls(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Return an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that replaces null elements in the specified sequence with instances of <see cref="T:Adam.JSGenerator.NullExpression"/>. 
            </summary>
            <param name="query">The sequence to filter.</param>
            <returns>A sequence of expressions.</returns>
        </member>
        <member name="T:Adam.JSGenerator.BinaryOperator">
            <summary>
            Represents the binary operator used in a binary operation.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Assign">
            <summary>
            Represents the assignment '=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Add">
            <summary>
            Represents the addition '+' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.AddAndAssign">
            <summary>
            Represents the add-and-asign '+=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Subtract">
            <summary>
            Represents the subtraction '-' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.SubtractAndAssign">
            <summary>
            Represents the subtract-and-assign '-=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Multiply">
            <summary>
            Represents the multiplication '*' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.MultiplyAndAssign">
            <summary>
            Represents the multiply-and-assign '*=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Divide">
            <summary>
            Represents the division '/' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.DivideAndAssign">
            <summary>
            Represents the divide-and-assign '/=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Remain">
            <summary>
            Represents the remainder '%' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.RemainAndAssign">
            <summary>
            Represents the remain-and-assign '%=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseAnd">
            <summary>
            Represents the bitwise and '&amp;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseAndAndAssign">
            <summary>
            Represents the bitwise and-and-assign '&amp;=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseOr">
            <summary>
            Represents the bitwise or '|' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseOrAndAssign">
            <summary>
            Represents the bitwise or-and-assign '|=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseXor">
            <summary>
            Represents the bitwise exclusive-or '^' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.BitwiseXorAndAssign">
            <summary>
            Represents the bitwise exclusive-or-and-assign '^=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.ShiftLeft">
            <summary>
            Represents the bitwise shift-left '&lt;&lt;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.ShiftLeftAndAssign">
            <summary>
            Represents the bitwise shift-left-and-assign '&lt;&lt;=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.ShiftRight">
            <summary>
            Represents the bitwise shift-right '&gt;&gt;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.ShiftRightAndAssign">
            <summary>
            Represents the bitwise shift-right-and-assign '&gt;&gt;=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Equals">
            <summary>
            Represents the equals '==' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.Identical">
            <summary>
            Represents the identical '===' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.NotEqual">
            <summary>
            Represents the not-equal '!=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.NotIdentical">
            <summary>
            Represents the not-identical '!==' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.GreaterThan">
            <summary>
            Represents the greater-than '&gt;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.GreaterThanOrEqualTo">
            <summary>
            Represents the greater-than-or-equals-to '&gt;=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.LessThan">
            <summary>
            Represents the less-than '&lt;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.LessThanOrEqualTo">
            <summary>
            Represents the less-than-or-equals-to '&lt;=' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.LogicalAnd">
            <summary>
            Represents the logical and '&amp;&amp;' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.LogicalOr">
            <summary>
            Represents the logical or '||' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.InstanceOf">
            <summary>
            Represents the instance-of operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.In">
            <summary>
            Represents the in operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.BinaryOperator.MultipleEvaluation">
            <summary>
            Represents the multiple evaluation ',' operator.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.UnaryOperator">
            <summary>
            Represents the unary operator to use in an unary operation.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.Number">
            <summary>
            Represents the unary number '+' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.Negative">
            <summary>
            Represents the unary negative '-' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.BitwiseNot">
            <summary>
            Represents the bitwise not '~' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.LogicalNot">
            <summary>
            Represents the logical not '!' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.PreIncrement">
            <summary>
            Represents the pre-increment '++' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.PostIncrement">
            <summary>
            Represents the post-increment '++' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.PreDecrement">
            <summary>
            Represents the pre-decremenet '--' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.PostDecrement">
            <summary>
            Represents the post-decrement '--' operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.TypeOf">
            <summary>
            Represents the typeof operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.New">
            <summary>
            Represents the new operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.Delete">
            <summary>
            Represents the delete operator.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.UnaryOperator.Group">
            <summary>
            Represents the group operator.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ReturnStatement">
            <summary>
            Defines a return statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ReturnStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ReturnStatement"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ReturnStatement.#ctor(Adam.JSGenerator.Expression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ReturnStatement"/> that returns the specified value.
            </summary>
            <param name="value">The value to return.</param>
        </member>
        <member name="M:Adam.JSGenerator.ReturnStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ReturnStatement.Value">
            <summary>
            Gets or sets the value to return.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ReturnStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ContinueStatement">
            <summary>
            Defines a continue statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ContinueStatement.#ctor">
            <summary>
            Initializes a new instanec of <see cref="T:Adam.JSGenerator.ContinueStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ContinueStatement.#ctor(Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ContinueStatement"/> that jumps to the specified label.
            </summary>
            <param name="label">The name of the label to jump to.</param>
        </member>
        <member name="M:Adam.JSGenerator.ContinueStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ContinueStatement.Label">
            <summary>
            Gets or sets the label to jump to. 
            </summary>
            <remarks>
            If the continue statement should not specify a label, set this property to null.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.ContinueStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.StringExpression">
            <summary>
            Represents a string value, inserted as a literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.StringExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.StringExpression"/> with an empty value.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.StringExpression"/> for the specified Value.
            </summary>
            <param name="value">The string value that this instance must represent.</param>
        </member>
        <member name="M:Adam.JSGenerator.StringExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.StringExpression.Value">
            <summary>
            Gets or sets the Value to append.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.RegularExpression">
            <summary>
            Represents a regular expression, inserted as a literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.RegularExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.RegularExpression"/> for the specified Value.
            </summary>
            <param name="value">The regular expression that this instance must represent.</param>
        </member>
        <member name="M:Adam.JSGenerator.RegularExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.RegularExpression.Value">
            <summary>
            Gets or sets the Value to append.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.BreakStatement">
            <summary>
            Defines a break statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BreakStatement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.BreakStatement"/> class.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BreakStatement.#ctor(Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.BreakStatement"/> class for the specified label.
            </summary>
            <param name="label">A label that the break statement must refer to.</param>
        </member>
        <member name="M:Adam.JSGenerator.BreakStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.BreakStatement.Label">
            <summary>
            Gets or sets the label that the break statement must refer to.
            </summary>
            <remarks>
            To indicate that no label must be referred to, set this member to null.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.BreakStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.LoopStatement">
            <summary>
            Defines a loop statement. (for(;;);)
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.LoopStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.LoopStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> for the specified initializtion, condition, iteration and statement.
            </summary>
            <param name="initialization">The initialization of the loop.</param>
            <param name="condition">The condition of the loop.</param>
            <param name="iteration">The iteration of the loop.</param>
            <param name="statement">The statement to run in the loop.</param>
            <remarks>
            The Statement property cannot be null. Use an <see cref="T:Adam.JSGenerator.EmptyStatement"/> statement if necessary.
            All of the other parameters are optional, leaving all of them out will result in an eternal loop.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.LoopStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.LoopStatement.Initialization">
            <summary>
            Gets or sets the initialization part of the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.LoopStatement.Condition">
            <summary>
            Gets or sets the condition of the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.LoopStatement.Iteration">
            <summary>
            Gets or sets the iteration part of the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.LoopStatement.Statement">
            <summary>
            Gets or sets the statement to run in the loop.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.FunctionExpressionHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpressionHelpers.Parameters(Adam.JSGenerator.FunctionExpression,Adam.JSGenerator.IdentifierExpression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> based on an existing one, and adds parameters to it.
            </summary>
            <param name="expression">The instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> to copy the <see cref="P:Adam.JSGenerator.FunctionExpression.Name"/> and <see cref="P:Adam.JSGenerator.FunctionExpression.Body"/> from.</param>
            <param name="identifiers">An array of parameters to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpressionHelpers.Parameters(Adam.JSGenerator.FunctionExpression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.IdentifierExpression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> based on an existing one, and adds parameters to it.
            </summary>
            <param name="expression">The instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> to copy the <see cref="P:Adam.JSGenerator.FunctionExpression.Name"/> and <see cref="P:Adam.JSGenerator.FunctionExpression.Body"/> from.</param>
            <param name="identifiers">A sequence of parameters to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpressionHelpers.Do(Adam.JSGenerator.FunctionExpression,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> based on an existing one, and adds statements to it.
            </summary>
            <param name="expression">The instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> to copy the <see cref="P:Adam.JSGenerator.FunctionExpression.Name"/> and <see cref="P:Adam.JSGenerator.FunctionExpression.Parameters"/> from.</param>
            <param name="statements">An array of statements to add to the body of the function.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.FunctionExpressionHelpers.Do(Adam.JSGenerator.FunctionExpression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> based on an existing one, and adds statements to it.
            </summary>
            <param name="expression">The instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> to copy the <see cref="P:Adam.JSGenerator.FunctionExpression.Name"/> and <see cref="P:Adam.JSGenerator.FunctionExpression.Parameters"/> from.</param>
            <param name="statements">A sequence of statements to add to the body of the function.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.CommentStatement">
            <summary>
            A statement that includes a piece of text as comment.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CommentStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.CommentStatement"/> class.
            </summary>
            <param name="content">The content of the comment.</param>
        </member>
        <member name="M:Adam.JSGenerator.CommentStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent the comment to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the comment is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.CommentStatement.Content">
            <summary>
            Gets or sets the content of the comment.
            </summary>
            <value>
            The content of the comment.
            </value>
        </member>
        <member name="P:Adam.JSGenerator.CommentStatement.Style">
            <summary>
            Gets or sets the comment's rendering style.
            </summary>
            <value>
            The comment's rendering style.
            </value>
        </member>
        <member name="P:Adam.JSGenerator.CommentStatement.AddExtraLineBreaks">
            <summary>
            Gets or sets a value indicating whether extra line breaks are added before and after the comment, to improve readability.
            </summary>
            <value>
              <c>true</c> if extra line breaks are added; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Adam.JSGenerator.PropertyOperationExpression">
            <summary>
            Defines a property operation. (aka the dot '.' operator)
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.PropertyOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.PropertyOperationExpression"/> for the specified left and right operands.
            </summary>
            <param name="operandLeft">The left operand of the operation.</param>
            <param name="operandRight">The right operand of the operation.</param>
        </member>
        <member name="M:Adam.JSGenerator.PropertyOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.PropertyOperationExpression.OperandLeft">
            <summary>
            Gets or sets the left operand of the operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.PropertyOperationExpression.OperandRight">
            <summary>
            Gets or sets the right operand of the operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.PropertyOperationExpression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.ConditionalOperationExpressionHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.ConditionalOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalOperationExpressionHelpers.Iif(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ConditionalOperationExpression"/> for the specified arguments.
            </summary>
            <param name="condition">The expression that serves as the condition.</param>
            <param name="ifTrue">The expression returned if the condition evaluates to true.</param>
            <param name="ifFalse">The expression returned if the condition does not evaluate to true.</param>
            <returns>The new instance of <see cref="T:Adam.JSGenerator.ConditionalOperationExpression"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.WithStatement">
            <summary>
            Defines a with statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WithStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WithStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/> for the specified expression and statement.
            </summary>
            <param name="expression">The expression to add to the scope.</param>
            <param name="statement">The statement to run in the scope.</param>
        </member>
        <member name="M:Adam.JSGenerator.WithStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.WithStatement.Expression">
            <summary>
            Gets or sets the expression that is added to the scope.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.WithStatement.Statement">
            <summary>
            Gets or sets the statement that is run in the scope.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.WhileStatement">
            <summary>
            Defines the while statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WhileStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WhileStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/> for the specified condition and statement.
            </summary>
            <param name="condition">The condition to check in the loop.</param>
            <param name="statement">The statement to run in the loop.</param>
        </member>
        <member name="M:Adam.JSGenerator.WhileStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.WhileStatement.Condition">
            <summary>
            Gets or sets the condition to check in the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.WhileStatement.Statement">
            <summary>
            Gets or sets the statement to run in the loop.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.SnippetStatement">
            <summary>
            Represents a statement whose value is inserted as is.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.SnippetStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.SnippetStatement"/> class.
            </summary>
            <param name="value">The string value that this instance must represent.</param>
        </member>
        <member name="M:Adam.JSGenerator.SnippetStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.SnippetStatement.Value">
            <summary>
            Gets or sets the Value to append.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.SnippetExpression">
            <summary>
            Represents an expression whose value is inserted as is.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.SnippetExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.SnippetExpression"/> for the specified Value.
            </summary>
            <param name="value">The string value that this instance must represent.</param>
        </member>
        <member name="M:Adam.JSGenerator.SnippetExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.SnippetExpression.Value">
            <summary>
            Gets or sets the Value to append.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.Script">
            <summary>
            Represents a list of statements.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Script.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.Script"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Script.#ctor(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.Script"/> for the specified statements.
            </summary>
            <param name="statements">A sequence of statements.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.#ctor(Adam.JSGenerator.Statement[])">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.Script"/> for the specified statements.
            </summary>
            <param name="statements">An array of statements.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.Add(Adam.JSGenerator.Statement)">
            <summary>
            Adds a new statement to the list.
            </summary>
            <param name="statement">The statement to add.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.Add(Adam.JSGenerator.Statement[])">
            <summary>
            Adds a number of statements to the list.
            </summary>
            <param name="statements">An array of statements to add to the list.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.Add(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Adds a number of statements to the list.
            </summary>
            <param name="statements">A sequence of statements to add to the list.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.Add(Adam.JSGenerator.Script)">
            <summary>
            Adds all the statements from another script to the list.
            </summary>
            <param name="script">A script with statements.</param>
        </member>
        <member name="M:Adam.JSGenerator.Script.ToString(Adam.JSGenerator.ScriptOptions)">
            <summary>
            Produces all the statements as script.
            </summary>
            <param name="options">The options to use when generating JavaScript.</param>
            <returns>A string representing all the statements in the list as JavaScript.</returns>
            <remarks>
            All the statements in the list that are null are converted to instances of <see cref="T:Adam.JSGenerator.EmptyStatement"/>.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.Script.ToString">
            <summary>
            Produces all the statements as script.
            </summary>
            <returns>A string representing all the statements in the list as JavaScript.</returns>
            <remarks>
            All the statements in the list that are null are converted to instances of <see cref="T:Adam.JSGenerator.EmptyStatement"/>.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.Script.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of statements. 
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.Script.Statements">
            <summary>
            Gets or sets the list of statements.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.JS">
            <summary>
            Helper class used in generating Javascript snippets from the server.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.JS.QuoteChars">
            <summary>
            Contains the list of characters allowed for quoting.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.JS.Reserved">
            <summary>
            Contains the list of reserved keywords as defined by Javascript.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JS.CharToUnicode(System.Char)">
            <summary>
            Converts a single <see cref="T:System.Char" /> into a corresponding representation in JavaScript.
            </summary>
            <param name="character">The character to convert.</param>
            <returns>A string representing the character in JavaScript.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.FindMostSuitableQuoteChar(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Determines the optimal char to use as a quote char.
            </summary>
            <param name="source">A sequence of characters to analyze.</param>
            <returns>The most optimal char to use as a quote char.</returns>
            <remarks>
            JavaScript allows both the single quote (') and double quote (") to quote strings.
            Therefore, it's better to find the quote char that has been used less than the other, to minimize escaping.        
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.GetValues(System.Object)">
            <summary>
            Uses reflection to create a dictionary of expressions to expressions for each property of the passed object.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>A dictionary of expressions to expressions representing the values of the properties of the passed object.</returns>
            <remarks>
            This method uses reflection to retrieve all the properties of an object, so you can use anonymous objects to be converted into
            JavaScript object literals. These objects can be nested, as well as contain arrays.
            </remarks>     
        </member>
        <member name="M:Adam.JSGenerator.JS.IsValidIdentifier(System.String)">
            <summary>
            Determines whether the name is a valid identifier.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if the name is a valid identifier, otherwise false.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.IsReserved(System.String)">
            <summary>
            Determines whether the specified name is a reserved word.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.QuoteString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Quotes the string for use in Javascript.
            </summary>
            <param name="source">The string to quote.</param>
            <returns>The quoted string.</returns>
            <remarks>
                The most suitable quote character is determined using the FindMostSuitableQuoteChar function.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.QuoteString(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            Quotes the string for use in Javascript, using the quote character supplied.
            </summary>
            <param name="source">The string to quote.</param>
            <param name="quoteCharacter">The character to use to quote.</param>
            <returns>The quoted string.</returns>
            <remarks>
                All the characters that need to be present in the string are escaped, including the control characters.
                The escape character '\' is not escaped itself, for example to preserve regex patterns.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.BlockOrStatement(Adam.JSGenerator.Statement[])">
            <summary>
            Returns either an instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the statements, the only statement, or an empty statement depending on the 
            number of statements specified.
            </summary>
            <param name="statements">An array of statements to conditionally wrap in a BlockStatement</param>
            <returns>Either an instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/>, a single statement or an EmptyStatement object.</returns>
            <remarks>
            The return type of this method depends on the number of inputs. 
            If the input is null or empty, an instance of <see cref="T:Adam.JSGenerator.EmptyStatement"/> is returned.
            If the input has one statement, that statement is returned.
            If the input has more than one statement, a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing those statements is returned.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.BlockOrStatement(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Returns either an instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the statements, the only statement, or an empty statement depending on the 
            number of statements specified.
            </summary>
            <param name="statements">A sequence of statements to conditionally wrap in a BlockStatement</param>
            <returns>Either an instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/>, a single statement or an EmptyStatement object.</returns>
            <remarks>
            The return type of this method depends on the number of inputs. 
            If the input is null or empty, an instance of <see cref="T:Adam.JSGenerator.EmptyStatement"/> is returned.
            If the input has one statement, that statement is returned.
            If the input has more than one statement, a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing those statements is returned.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.ParseId(System.String)">
            <summary>
            Parses the string for an identifier. Only accepted characters are those valid in identifiers, and the property operator.
            </summary>
            <param name="name">The string to parse for an identifier</param>
            <returns>The parsed identifier as an expression chain.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Array(Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> based on the passed elements.
            </summary>
            <param name="elements">The elements to add to the array.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> containing the passed elements.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Array(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> based on the passed elements.
            </summary>
            <param name="elements">An array of expressions to add to the array.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> containing the passed elements.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Array(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> based on the passed elements.
            </summary>
            <param name="elements">A sequence of objects to add to the array.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.ArrayExpression"/> containing the passed elements.</returns>
            <remarks>
            This overload checks each element's type, and if it inherits from Expression it is passed unchanged into the array.
            If it does not, JS.Object is used to create a new ObjectLiteralExpression from it.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Block(Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the specified statements.
            </summary>
            <param name="statements">An array of statements that the block should contain.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the provided statements.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Block(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the specified statements.
            </summary>
            <param name="statements">A sequence of statements that the block should contain.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the provided statements.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Break(Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BreakStatement"/> that breaks to the specified label.
            </summary>
            <param name="label">The label to break to.</param>
            <returns>an instance of <see cref="T:Adam.JSGenerator.BreakStatement"/> that breaks to the specified label.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Comment(System.String)">
            <summary>
            Includes the specified content as a comment.
            </summary>
            <param name="content">The content.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CommentStatement"/>.</returns>
            <remarks>
            By default, the content is inserted as a "multi-line comment" ("/* */") unless it contains either "/*", 
            "*/" or line breaks, in which case it falls back to "single-line comments", by preceding each line in the 
            source with "// ".
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Continue(Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ContinueStatement"/> that continues at the specified label.
            </summary>
            <param name="label">The label to continue at.</param>
            <returns>an instance of <see cref="T:Adam.JSGenerator.ContinueStatement"/> that continues at the specified label.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Delete(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a delete operation on the specified expression.
            </summary>
            <param name="expression">The expression to perform a delete operation on.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a delete operation.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Do(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/> containing the specified statements.
            </summary>
            <param name="statements">A sequence of statements to include in the body of the do-while loop.</param>
            <returns>an instace of <see cref="T:Adam.JSGenerator.DoWhileStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Do(Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/> containing the specified statements.
            </summary>
            <param name="statements">An array of statements to include in the body of the do-while loop.</param>
            <returns>an instace of <see cref="T:Adam.JSGenerator.DoWhileStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Empty">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.EmptyStatement"/>.
            </summary>
            <returns>an instance of <see cref="T:Adam.JSGenerator.EmptyStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Find(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> that performs a call to the Microsoft AJAX global '$find' function.
            </summary>
            <param name="expression">The expression to use as the first argument to the call to $find.</param>
            <returns>an instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> for the function call.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.For(Adam.JSGenerator.Expression)">
            <summary>
             Creates a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/> that is incomplete. You'll need to use the helper method <see cref="M:Adam.JSGenerator.IteratorStatementHelpers.In(Adam.JSGenerator.IteratorStatement,Adam.JSGenerator.Expression)"/> to combine it with a collection to iterator though.
            </summary>
            <param name="variable">The expression to use as the variable to loop with.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.For(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> that represents a JavaScript for-loop with a loop initializer, a loop condition and loop iteration expression.
            </summary>
            <param name="initialization">The expression to use as the loop initialization.</param>
            <param name="condition">The expression to use as the loop condition.</param>
            <param name="iteration">The expression to use as the loop iterator.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/>.</returns>
            <remarks>
            Any of the parameters may be null to indicate that this part is not present in the loop.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Function(Adam.JSGenerator.IdentifierExpression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/> that represents a named function.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.FunctionExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Get(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> that represents a call to the Microsoft AJAX global '$get' function.
            </summary>
            <param name="expression">The expression to use an argument to the call.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Group(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that surrounds the specified expression with parens.
            </summary>
            <param name="expression">The expression to surround by parens.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Id(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.IdentifierExpression"/> representing the specified identifier.
            </summary>
            <param name="name">The identifier that this instance must represent.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.IdentifierExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.If(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> for the specified condition.
            </summary>
            <param name="condition">The expression that specifies the condition.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.JQuery(Adam.JSGenerator.Expression[])">
            <summary>
             Creates a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> that performs a call to the jQuery function with the specified arguments.
            </summary>
            <param name="arguments">The arguments to pass to the jQuery function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Label(Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.Statement)">
            <summary>
            Returns a new instance of <see cref="T:Adam.JSGenerator.LabelStatement"/>.
            </summary>
            <param name="name">The name of the label.</param>
            <param name="statement">The statement this label precedes.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.LabelStatement"/>.</returns>        
        </member>
        <member name="M:Adam.JSGenerator.JS.Number(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.NumberExpression"/> that represents the passed value.
            </summary>
            <param name="value">The value that must be represented by the instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.NumberExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.String(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.StringExpression"/> that represents the passed value.
            </summary>
            <param name="value">The value that must be represented by the instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.StringExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Boolean(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BooleanExpression"/> that represents the passed value.
            </summary>
            <param name="value">The value that must be represented by the instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BooleanExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Multiple(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Returns a new expression that combines one or more expressions using the multiple evaluation operator.
            </summary>
            <param name="expressions">The expressions to combine.</param>
            <returns>
            Null if no expressions are passed.
            The expression if only one expression is returned from the enumerable. 
            A new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that combines the expressions using the multiple evaluation operator.</returns>
            <remarks>
            If the enumeration is null, or if it returns no expressions, null is returned.
            If the enumeration returns one expression, that expression is returned.
            Otherwise, all the expressions are combined using multiple evaluation operators.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Multiple(Adam.JSGenerator.Expression[])">
            <summary>
            Returns a new expression that combines one or more expressions using the multiple evaluation operator.
            </summary>
            <param name="expressions">The expressions to combine.</param>
            <returns>A new expression that combines the expressions.</returns>
            <remarks>
            This method returns either null, if no expressions are passed, or the single expression if only one expression is passed,
            or a chain of BinaryOperatorExpressions to combine all the passed expressions.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.New(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that represents the creation of a new object, using the specified arguments.
            </summary>
            <param name="expression">An expression that returns a constructor.</param>
            <param name="arguments">An array of arguments to pass to the constructor.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.New(Adam.JSGenerator.Expression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that represents the creation of a new object, using the specified arguments.
            </summary>
            <param name="expression">An expression that returns a constructor.</param>
            <param name="arguments">A sequence of arguments to pass to the constructor.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Not(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a logical not operator (!) on an expression.
            </summary>
            <param name="expression">The expression to perform the logical not operator on.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Null">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.NullExpression"/>.
            </summary>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.NullExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.This">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ThisExpression"/>.
            </summary>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.ThisExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Object">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> representing an empty object literal.
            </summary>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Object(System.Collections.Generic.IDictionary{Adam.JSGenerator.Expression,Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.
            </summary>
            <param name="properties">A dictionary that contains the properties to apply to the object literal.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Object(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.
            </summary>
            <param name="value">The object whose properties will be represented by the object literal.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.</returns>
            <remarks>
            This method calls <see cref="M:Adam.JSGenerator.JS.GetValues(System.Object)"/> to retrieve all the properties of the specified object.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Regex(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.RegularExpression"/> representing a regular expression literal.
            </summary>
            <param name="expression">A string containing the regular expression.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.RegularExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Return(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ReturnStatement"/> that returns the specified value.
            </summary>
            <param name="value">An expression that represents the value to return.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ReturnStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Script(Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.Script" /> that contains the specified statements.
            </summary>
            <param name="statements">An array of statements that must be contained.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.Script" />.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Script(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.Script" /> that contains the specified statements.
            </summary>
            <param name="statements">A sequence of statements that must be contained.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.Script" />.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Snippet(System.String)">
            <summary>
            Creates a new instance of <sse cref="T:Adam.JSGenerator.SnippetExpression"/> that represents the specified content.
            </summary>
            <param name="content">The content to be produced by the snippet.</param>
            <returns>a new instance of <sse cref="T:Adam.JSGenerator.SnippetExpression"/></returns>
            <remarks>
            The content that this instance contains is added as is, without conversion, encoding or quoting.
            
            This method is obsolete, please use the equivalent new method <see cref="M:Adam.JSGenerator.JS.Expression(System.String)"/> instead.
            </remarks>		
        </member>
        <member name="M:Adam.JSGenerator.JS.Expression(System.String)">
            <summary>
            Creates a new instance of <sse cref="T:Adam.JSGenerator.SnippetExpression"/> that represents the specified content.
            </summary>
            <param name="content">The content to be produced by the snippet.</param>
            <returns>a new instance of <sse cref="T:Adam.JSGenerator.SnippetExpression"/></returns>
            <remarks>
            The content that this instance contains is added as is, without conversion, encoding or quoting.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Statement(System.String)">
            <summary>
            Creates a new instance of <sse cref="T:Adam.JSGenerator.SnippetStatement"/> that represents the specified content.
            </summary>
            <param name="content">The content to be produced by the snippet.</param>
            <returns>a new instance of <sse cref="T:Adam.JSGenerator.SnippetStatement"/></returns>
            <remarks>
            The content that this instance contains is added as is, without conversion, encoding or quoting.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.JS.Switch(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> that switches on the provided expression.
            </summary>
            <param name="expression">An expression to switch on.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Throw(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ThrowStatement"/> that throws the specified expression as an exception.
            </summary>
            <param name="expression">The expression to throw.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ThrowStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Try(Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> that contains the specified statements in its try block.
            </summary>
            <param name="statements">An array of statements to place in the try block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Try(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> that contains the specified statements in its try block.
            </summary>
            <param name="statements">A sequence of statements to place in the try block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Try(Adam.JSGenerator.CompoundStatement)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.
            </summary>
            <param name="block">The instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> to use for the try block.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Var(Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/> that declares the specified expressions.
            </summary>
            <param name="expressions">An array of expressions that contain the variables to declare.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Var(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/> that declares the specified expressions.
            </summary>
            <param name="expressions">A sequence of expressions that contain the variables to declare.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.DeclarationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.While(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/> that will loop while the specified condition returns true.
            </summary>
            <param name="condition">An expression that the loop will test for.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.With(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/>.
            </summary>
            <param name="expression">The expression that will be in the global scope.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JS.Alert(Adam.JSGenerator.Expression)">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> containing a call to the alert() function with the specified message.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JS.Confirm(Adam.JSGenerator.Expression)">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> containing a call to the confirm() function with the specified message.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JS.Prompt(Adam.JSGenerator.Expression)">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> containing a call to the prompt() function with the specified message.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JS.Eval(Adam.JSGenerator.Expression)">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> containing a call to the eval() function with the specified expression.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JS.ArrayOrObject(System.Collections.IEnumerable)">
            <summary>
            Uses reflection to find out if the specified sequence implements any <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            and returns an <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> in that case, or an <see cref="T:Adam.JSGenerator.ArrayExpression"/> if not.
            </summary>
            <param name="enumerable">The sequence to convert.</param>
            <returns>Either an instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> or <see cref="T:Adam.JSGenerator.ArrayExpression"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.UnaryOperationExpressionHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.BitwiseNot(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a bitwise not operation.
            </summary>
            <param name="expression">The expression on which to perform a bitwise not operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.Delete(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a delete operation.
            </summary>
            <param name="expression">The expression to delete.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.Group(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that embeds the specified expression in parens.
            </summary>
            <param name="expression">The expression to embed in parens.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.LogicalNot(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a logical not operation.
            </summary>
            <param name="expression">The expression on which to perform a logical not operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.Negative(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that negates the specified expression.
            </summary>
            <param name="expression">The expression to negate.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.New(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that creates a new object from the specified constructor.
            </summary>
            <param name="expression">An expression that returns a constructor.</param>
            <param name="parameters">The parameters to supply to the constructor.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
            <remarks>
            This method creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that creates a new object from the specified constructor. The result looks like this:
            <code>
            new constructor(parameters)
            </code>
            The constructor can be any expression as long as it returns a constructor, a function that initializes a new instance.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.Number(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that converts an expression to a number.
            </summary>
            <param name="expression">The expression to convert to a number.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
            <remarks>
            Even though some sources state that the unary + operator is close to a no-op, the standard ECMA-262 clearly states its
            purpose on p.72: to convert an expression to a number. If the expression cannot be converted, NaN is returned.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.PostDecrement(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a post-decrement operation.
            </summary>
            <param name="expression">The expression to post-decremenet.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.PostIncrement(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a post-increment operation.
            </summary>
            <param name="expression">The expression to post-incremenet.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.PreDecrement(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a pre-decremenet operation.
            </summary>
            <param name="expression">The expression to pre-decrement.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.PreIncrement(Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that performs a pre-increment operation.
            </summary>
            <param name="expression">The expression to pre-increment.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.UnaryOperationExpressionHelpers.TypeOf(Adam.JSGenerator.Expression)">
            <summary>
            Creates an instance of <see cref="T:Adam.JSGenerator.UnaryOperationExpression"/> that returns the type of the specified expression.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.CallOperationExpressionHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CallOperationExpressionHelpers.Call(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> that performs a call operation using the specified arguments.
            </summary>
            <param name="expression">The expression to perform the call operation on.</param>
            <param name="arguments">An arrary of arguments to pass in the call operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.CallOperationExpressionHelpers.Call(Adam.JSGenerator.Expression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/> that performs a call operation using the specified arguments.
            </summary>
            <param name="expression">The expression to perform the call operation on.</param>
            <param name="arguments">A sequence of arguments to pass in the call operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.CompoundStatement">
            <summary>
            Defines a statement block.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CompoundStatement.#ctor">
            <summary>
            Creates a new empty instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CompoundStatement.#ctor(Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the specified statements.
            </summary>
            <param name="statements">An array of statements to add to the CompoundStatement object.</param>
        </member>
        <member name="M:Adam.JSGenerator.CompoundStatement.#ctor(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.CompoundStatement"/> containing the passed statements.
            </summary>
            <param name="statements">The statements to add to the CompoundStatement object.</param>
        </member>
        <member name="M:Adam.JSGenerator.CompoundStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.CompoundStatement.Statements">
            <summary>
            Gets or sets the list of statements contained in this instance.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.BinaryOperationExpression">
            <summary>
            Contains a binary operation.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> with the specified operator and operands.
            </summary>
            <param name="operandLeft">The left side of the binary operation.</param>
            <param name="operandRight">The right side of the binary operation.</param>
            <param name="op">The binary operator</param>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.BinaryOperationExpression.OperandLeft">
            <summary>
            Gets or sets the operand on the left side of the binary operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.BinaryOperationExpression.OperandRight">
            <summary>
            Gets or sets the operand on the right side of the binary operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.BinaryOperationExpression.Operator">
            <summary>
            Gets or sets the operator to use in the binary operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.BinaryOperationExpression.PrecedenceLevel">
            <summary>
            Determines the precedence level of this binary operation.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.JQ">
            <summary>
             Serves as an example for writing extension methods.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.JQ.JQueryFunction">
            <summary>
            The name of the jQuery function to use. To be safe, leave this at 'jQuery', but if you want to use the shorthand you can set this to '$'.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Ajax(System.String)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
            <param name="url">A string containing the URL to which the request is sent.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Ajax(System.String,System.Object)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
            <param name="url">A string containing the URL to which the request is sent.</param>
            <param name="settings">A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Ajax(System.Object)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
            <param name="settings">A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Ajax(Adam.JSGenerator.Expression)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
            <param name="settings">A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Ajax(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Perform an asynchronous HTTP (Ajax) request.
            </summary>
            <param name="url">A string containing the URL to which the request is sent.</param>
            <param name="settings">A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.AjaxPrefilter(System.String,Adam.JSGenerator.Expression)">
            <summary>
            Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
            </summary>
            <param name="dataTypes">An optional string containing one or more space-separated dataTypes</param>
            <param name="handler">A handler to set default values for future Ajax requests.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.AjaxPrefilter(Adam.JSGenerator.Expression)">
            <summary>
            Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
            </summary>
            <param name="handler">A handler to set default values for future Ajax requests.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.AjaxSetup(System.Object)">
            <summary>
            Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
            </summary>
            <param name="options">A set of key/value pairs that configure the default Ajax request. All options are optional.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Bind(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="events">A map of one or more DOM event types and functions to execute for them.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQ.Blur(Adam.JSGenerator.Expression)">
            <summary>
            Triggers the blur event on the selected elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQ.Change(Adam.JSGenerator.Expression)">
            <summary>
            Trigger the "change" event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Change(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="handlerOrData">A function to execute each time the event is triggered or a map of data that will be passed to the event handler.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Change(Adam.JSGenerator.Expression,System.Object,Adam.JSGenerator.Expression)">
            <summary>
            Trigger the "change" event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="data">A map of data that will be passed to the event handler.</param>
            <param name="handler">A function to execute each time the event is triggered.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Children(Adam.JSGenerator.Expression)">
            <summary>
            Get the children of each element in the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Children(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Get the children of each element in the set of matched elements filtered by a selector.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="selector">The selector.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.ClearQueue(Adam.JSGenerator.Expression)">
            <summary>
            Remove from the queue all items that have not yet been run.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.ClearQueue(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Remove from the queue all items that have not yet been run.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="queueName">Name of the queue.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Click(Adam.JSGenerator.Expression)">
            <summary>
            Trigger the "click" event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Click(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="handlerOrData">A function to execute each time the event is triggered or a map of data that will be passed to the event handler.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Click(Adam.JSGenerator.Expression,System.Object,Adam.JSGenerator.Expression)">
            <summary>
            Trigger the "click" event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="data">A map of data that will be passed to the event handler.</param>
            <param name="handler">A function to execute each time the event is triggered.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Clone(Adam.JSGenerator.Expression)">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Clone(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="withDataAndEvents">A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="M:Adam.JSGenerator.JQ.Clone(Adam.JSGenerator.Expression,System.Object,System.Object)">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="withDataAndEvents">A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</param>
            <param name="deepWithDataAndEvents">A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).</param>
            <returns>
            A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.
            </returns>
        </member>
        <member name="T:Adam.JSGenerator.IteratorStatementHelpers">
            <summary>
            Provides extension methods to create instances of <see cref="T:Adam.JSGenerator.IteratorStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatementHelpers.In(Adam.JSGenerator.IteratorStatement,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/> that iterates over the specified collection.
            </summary>
            <param name="statement">The statement to copy the properties from.</param>
            <param name="collection">The expression to use as the collection.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/></returns>
            <remarks>
            This helper method completes a <see cref="T:Adam.JSGenerator.IteratorStatement"/>.
            It's used as in the following example:
            <code>
            var iteratorstatement = JS.For(id).In(collection);
            </code>
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatementHelpers.Do(Adam.JSGenerator.IteratorStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/> that copies the <see cref="P:Adam.JSGenerator.IteratorStatement.Variable"/> 
            and <see cref="P:Adam.JSGenerator.IteratorStatement.Collection"/> properties of the specified statement, and adds the statements to the body.
            </summary>
            <param name="statement">The statement to copy the properties from.</param>
            <param name="statements">An array of statements to add to the body.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.IteratorStatementHelpers.Do(Adam.JSGenerator.IteratorStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/> that copies the <see cref="P:Adam.JSGenerator.IteratorStatement.Variable"/> 
            and <see cref="P:Adam.JSGenerator.IteratorStatement.Collection"/> properties of the specified statement, and adds the statements to the body.
            </summary>
            <param name="statement">The statement to copy the properties from.</param>
            <param name="statements">A sequence of statements to add to the body.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.IteratorStatement"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.ScriptOptions">
            <summary>
            Contains options that are applied to generating JavaScript.
            </summary>
            <remarks>
            A new instance of this class should have sensible defaults.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.ScriptOptions.PreferredQuoteChar">
            <summary>
            Contains the preferred character to use when quoting strings. Allowed characters are single (') quote and double (") quote.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ScriptOptions.AlwaysQuoteObjectLiteralKeys">
            <summary>
            Gets or sets a value indicating whether the keys of object literals are always quoted, even if they're valid JavaScript identifiers.
            </summary>
            <remarks>
            Set this value to true when generating script that serves as JSON.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.ScriptOptions.WrapInScriptBlock">
            <summary>
            Gets or sets a value that, when true, causes the <see cref="!:Expression.ToString()"/> method to wrap the expression in a script block.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ScriptOptions.Default">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.ScriptOptions"/> with the default options set.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ScriptOptions.Json">
            <summary>
            Returns an instance of <see cref="T:Adam.JSGenerator.ScriptOptions"/> suitable for return JSON script.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ConditionalStatement">
            <summary>
            Defines the conditional statement if-else.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Statement,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> for the specified condition, true statement and false statement.
            </summary>
            <param name="condition">The condition that is tested.</param>
            <param name="thenStatement">The statement that is run when the condition evaluates to anything else but falsy.</param>
            <param name="elseStatement">The statement that is run when the condition evaluates to falsy.</param>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatement.#ctor(Adam.JSGenerator.ConditionalStatement,Adam.JSGenerator.Expression,Adam.JSGenerator.Statement,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ConditionalStatement"/> for the specified condition, true statement and false statement.
            </summary>
            <param name="parent">The parent condition in a chain of if-elseif conditions.</param>
            <param name="condition">The condition that is tested.</param>
            <param name="thenStatement">The statement that is run when the condition evaluates to anything else but falsy.</param>
            <param name="elseStatement">The statement that is run when the condition evaluates to falsy.</param>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalStatement.Condition">
            <summary>
            Gets or sets the condition of the conditional statement.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalStatement.ThenStatement">
            <summary>
            Gets or sets the statement to run if the condition evaluates to true.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalStatement.ElseStatement">
            <summary>
            Gets or sets the statement to run if the condition evaluates to falsy.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalStatement.Parent">
            <summary>
            Gets or sets the parent condition in the chain of if-then-elseif conditions.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.IndexOperationExpression">
            <summary>
            Defines an index operation.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IndexOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.IndexOperationExpression"/>.
            </summary>
            <param name="operandLeft">The operand on which to perform the index operation.</param>
            <param name="operandRight">The operand that specifies the index to retrieve.</param>
        </member>
        <member name="M:Adam.JSGenerator.IndexOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.IndexOperationExpression.OperandLeft">
            <summary>
            Gets or sets the operand on which to perform the index operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.IndexOperationExpression.OperandRight">
            <summary>
            Gets or sets the operand that specifies the index to retrieve.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.IndexOperationExpression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.DoWhileStatement">
            <summary>
            Defines a do-while loop.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.DoWhileStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.DoWhileStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Statement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.DoWhileStatement"/> for the specified condition and statement.
            </summary>
            <param name="condition">The condition to check after the loop.</param>
            <param name="statement">The statement to run in the loop.</param>
        </member>
        <member name="M:Adam.JSGenerator.DoWhileStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.DoWhileStatement.Condition">
            <summary>
            Gets or sets the condition to check in the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.DoWhileStatement.Statement">
            <summary>
            Gets or sets the statement to run in the loop.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.DoWhileStatement.RequiresTerminator">
            <summary>
            Indicates that this object requires a terminating semicolon when used as a statement.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.NumberExpression">
            <summary>
            Represents a number, inserted as a literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.NumberExpression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.NumberExpression"/> for the specified Value.
            </summary>
            <param name="value">The Value of the literal.</param>
        </member>
        <member name="M:Adam.JSGenerator.NumberExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.NumberExpression.Value">
            <summary>
            Gets or sets the value to append as a literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Add(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Add elements to the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to add to.</param>
            <param name="arguments">The arguments to pass to the function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AddClass(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Adds the specified class(es) to each of the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="argument">The argument to pass to the function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.After(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="argument">The argument to pass to the function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxComplete(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Register a handler to be called when Ajax requests complete. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxError(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxSend(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxStart(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxStop(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AjaxSuccess(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
            </summary>
            <param name="expression">The jQuery set to apply this call.</param>
            <param name="handler">The function to be invoked.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AndSelf(Adam.JSGenerator.Expression)">
            <summary>
            Add the previous set of elements on the stack to the current set.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Animate(Adam.JSGenerator.Expression,System.Object,Adam.JSGenerator.Expression[])">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="properties">A map of CSS properties that the animation will move toward.</param>
            <param name="extras">
            Extra optional parameters, including:
            - A string or number determining how long the animation will run.
            - A string indicating which easing function to use for the transition.
            - A function to call once the animation is complete.
            </param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Animate(Adam.JSGenerator.Expression,System.Object,System.Object)">
            <summary>
            Perform a custom animation of a set of CSS properties.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="properties">A map of CSS properties that the animation will move toward.</param>
            <param name="options">A map of additional options to pass to the method.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Append(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="argument">The argument to pass to the function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.AppendTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Insert every element in the set of matched elements to the end of the target.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="target">A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Attr(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Get the value of an attribute for the first element in the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="attributeName">The name of the attribute to get.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Attr(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="attributeName">The name of the attribute to get.</param>
            <param name="value">A value to set for the attribute.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Attr(Adam.JSGenerator.Expression,System.Object)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="map">A map of attribute-value pairs to set.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Before(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="content">HTML string, DOM element, or jQuery object to insert before each element in the set of matched elements.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Bind(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression[])">
            <summary>
            Attach a handler to an event for the elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="eventType">A string containing one or more DOM event types, such as "click" or "submit," or custom event names.</param>
            <param name="extras">
            Extra optional parameters, including:
            - A map of data that will be passed to the event handler.
            - A function to execute each time the event is triggered or <c>false</c> to attach a function that prevents the default action from occurring and stops the event from bubbling.
            </param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Blur(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="handler">A function to execute each time the event is triggered.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Blur(Adam.JSGenerator.Expression,System.Object,Adam.JSGenerator.Expression)">
            <summary>
            Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
            </summary>
            <param name="eventData">A map of data that will be passed to the event handler.</param>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="handler">A function to execute each time the event is triggered.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>		
        </member>
        <member name="M:Adam.JSGenerator.JQuery.JQueryHelpers.Data(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Store arbitrary data associated with the matched elements.
            </summary>
            <param name="expression">The set of matched elements to call this function on.</param>
            <param name="key">The key argument to pass to the function.</param>
            <param name="value">The value argument to pass to the function.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.CallOperationExpression"/>.</returns>
        </member>
        <member name="T:Adam.JSGenerator.Association">
            <summary>
            Indicates whether an operator associates to the left or right.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.Association.LeftToRight">
            <summary>
            Arguments are evaluated in a left to right order.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.Association.RightToLeft">
            <summary>
            Arguments are evaluated in a right to left order.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.SwitchStatement">
            <summary>
            Defines a switch statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatement.#ctor(Adam.JSGenerator.Expression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> for the specified expression.
            </summary>
            <param name="expression">The expression on which to switch.</param>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatement.#ctor(Adam.JSGenerator.Expression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.CaseStatement})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> for the specified expression and cases.
            </summary>
            <param name="expression">The expresson on which to switch.</param>
            <param name="cases">A sequence of cases.</param>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.SwitchStatement.Expression">
            <summary>
            Gets or sets the expresson on which to switch.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.SwitchStatement.Cases">
            <summary>
            Gets or sets the list of cases.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ConditionalOperationExpression">
            <summary>
            Contains the conditional operation (?:)
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalOperationExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ConditionalOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalOperationExpression.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ConditionalOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ConditionalOperationExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalOperationExpression.Condition">
            <summary>
            Gets or sets the condition of the operation.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalOperationExpression.Then">
            <summary>
            Gets or sets the expression that is returned when the condition is true.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalOperationExpression.Else">
            <summary>
            Gets or sets the expression that is returned when the condition is false.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ConditionalOperationExpression.PrecedenceLevel">
            <summary>
            Indicates the level of precedence valid for this expresison.
            </summary>
            <remarks>
            This is used when combining expressions, to determine where parens are needed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.ObjectLiteralExpression">
            <summary>
            Defines an object literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpression.#ctor(System.Collections.Generic.IDictionary{Adam.JSGenerator.Expression,Adam.JSGenerator.Expression})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> that defines the specified properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpression.FromDictionary(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> that defines the specified properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpression.FromDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/> representing the keys and values of the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of Key.</typeparam>
            <typeparam name="TValue">The type of Value.</typeparam>
            <param name="dictionary">The dictionary from which to extract the keys and values to represent.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>.</returns>
        </member>
        <member name="P:Adam.JSGenerator.ObjectLiteralExpression.Properties">
            <summary>
            Gets or sets the dictionary of properties.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.ObjectLiteralExpressionHelpers">
            <summary>
            Provides extension methods that create new instances of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpressionHelpers.WithProperty(Adam.JSGenerator.ObjectLiteralExpression,Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>, by copying the specified expression's properties, and adding the specified name and value to the properties.
            </summary>
            <param name="expression">The expression to copy the properties from.</param>
            <param name="name">The name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.ObjectLiteralExpressionHelpers.WithProperties(Adam.JSGenerator.ObjectLiteralExpression,System.Collections.Generic.IDictionary{Adam.JSGenerator.Expression,Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/>, by copying the specified expression's properties, and adding the specified properties.
            </summary>
            <param name="expression">The expression to copy the properties from.</param>
            <param name="values">A dictionary containing properties to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.ObjectLiteralExpression"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.LoopStatementHelpers">
            <summary>
            Provides extension methods to work with instances of <see cref="T:Adam.JSGenerator.LoopStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.LoopStatementHelpers.Do(Adam.JSGenerator.LoopStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> based on the specified statement, with the specified block.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> to copy the initialization, condition and iteration from.</param>
            <param name="statements">An array of statements to be used by the new instance.</param>
            <returns>an instance of <see cref="T:Adam.JSGenerator.LoopStatement"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.LoopStatementHelpers.Do(Adam.JSGenerator.LoopStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> based on the specified statement, with the specified block.
            </summary>
            <param name="statement">The instance of <see cref="T:Adam.JSGenerator.LoopStatement"/> to copy the initialization, condition and iteration from.</param>
            <param name="statements">A sequence of statements to be used by the new instance.</param>
            <returns>an instance of <see cref="T:Adam.JSGenerator.LoopStatement"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.BinaryOperationHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.AssignWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that assigns one expression to another.
            </summary>
            <param name="expression">The left side of the assignment.</param>
            <param name="operand">The right side of the assignment.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.AddWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that adds one expression to another.
            </summary>
            <param name="expression">The left side of the addition.</param>
            <param name="operand">The right side of the addition.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.SubtractWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that subtracts one expression from another.
            </summary>
            <param name="expression">The left side of the subtraction.</param>
            <param name="operand">The right side of the subtraction.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.MultiplyBy(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that multiplies one expression by another.
            </summary>
            <param name="expression">The left side of the multiplication.</param>
            <param name="operand">The right side of the multiplication.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.DivideBy(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that divides one expression by another.
            </summary>
            <param name="expression">The left side of the division.</param>
            <param name="operand">The right side of the division.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.RemainderBy(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that computes the remainder of a division.
            </summary>
            <param name="expression">The left side of the remainder operation.</param>
            <param name="operand">The right side of the remainder operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.BitwiseAndWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a bitwise and operation.
            </summary>
            <param name="expression">The left side of the bitwise and operation.</param>
            <param name="operand">The right side of the bitwise and operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.BitwiseOrWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a bitwise or operation.
            </summary>
            <param name="expression">The left side of the bitwise or operation.</param>
            <param name="operand">The right side of the bitwise or operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.BitwiseXorWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a bitwise exclusive or operation.
            </summary>
            <param name="expression">The left side of the bitwise exclusive or operation.</param>
            <param name="operand">The right side of the bitwise exclusive or operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.ShiftLeftWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a left shift operation.
            </summary>
            <param name="expression">The left side of the left shift operation.</param>
            <param name="operand">The right side of the left shift operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.ShiftRightWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a right shift operation.
            </summary>
            <param name="expression">The left side of the right shift operation.</param>
            <param name="operand">The right side of the right shift operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsEqualTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs an equal comparison.
            </summary>
            <param name="expression">The left side of the equal comparison.</param>
            <param name="operand">The right side of the equal comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsIdenticalTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs an identical comparison.
            </summary>
            <param name="expression">The left side of the identical comparison.</param>
            <param name="operand">The right side of the identical comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsNotEqualTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a not-equal comparison.
            </summary>
            <param name="expression">The left side of the not-equal comparison.</param>
            <param name="operand">The right side of the not-equal comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsNotIdenticalTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a not-identical comparison. 
            </summary>
            <param name="expression">The left side of the not-identical comparison.</param>
            <param name="operand">The right side of the not-identical comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsGreaterThan(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a greater-than comparison.
            </summary>
            <param name="expression">The left side of the greater-than comparison.</param>
            <param name="operand">The right side of the greater-than comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsGreaterThanOrEqualTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a greater-than-or-equal comparison.
            </summary>
            <param name="expression">The left side of the comparison.</param>
            <param name="operand">The right side of the comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsLessThan(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a less-than comparison.
            </summary>
            <param name="expression">The left side of the less-than comparison.</param>
            <param name="operand">The right side of the less-than comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsLessThanOrEqualTo(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a less-than-or-equal comparison.
            </summary>
            <param name="expression">The left side of the less-than comparison.</param>
            <param name="operand">The right side of the less-than comparison.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.LogicalAndWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a logical and operation.
            </summary>
            <param name="expression">The left side of the logical and operation.</param>
            <param name="operand">The right side of the logical and operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.LogicalOrWith(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs a logical or operation.
            </summary>
            <param name="expression">The left side of the logical or operation.</param>
            <param name="operand">The right side of the logical or operation.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsInstanceOf(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs an instanceof operation.
            </summary>
            <param name="expression">The expression to test with instanceof.</param>
            <param name="operand">The expression to test for.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.IsIn(Adam.JSGenerator.Expression,Adam.JSGenerator.Expression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> that performs an 'in' operation.
            </summary>
            <param name="expression">The expression as the left side of the operation.</param>
            <param name="operand">The expression as the right side of the operation.</param>
            <returns>A new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.AndAssign(Adam.JSGenerator.BinaryOperationExpression)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/> based on an existing one, and adds assignment to the operation.
            </summary>
            <param name="expression">The expression to base the new one on.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.</returns>
            <remarks>
            This method creates a new instance of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>, and copies the operands from the specified expression.
            In addition, it will replace the operator with one that adds assignment to the opersion. For example, addition becomes add-and-assign, 
            multiplication becomes multiply-and-assign, and so forth.
            Operators that do not support assignment (mostly comparisons, logical operators) remain unchanged.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.BinaryOperationHelpers.Combined(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression},Adam.JSGenerator.BinaryOperator)">
            <summary>
            Combines the sequence of expressions using the specified binary operator.
            </summary>
            <param name="expressions">A sequence of expressions to combine.</param>
            <param name="op">The <see cref="T:Adam.JSGenerator.BinaryOperator"/> to use when combining.</param>
            <returns>An instance of <see cref="T:Adam.JSGenerator.Expression"/> that represents the combination of all the expressions in the sequence.</returns>
            <remarks>
            When the sequence is empty, null is returned.
            When the sequence contains a single expression, that expression is returned.
            In all other cases, all expressions are combined in a chain of instances of <see cref="T:Adam.JSGenerator.BinaryOperationExpression"/>.
            Null values in the sequence are replaced with instances of <see cref="T:Adam.JSGenerator.NullExpression"/>.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.ExceptionHandlingStatement">
            <summary>
            Defines an execption handling statement e.g. try-catch-finally.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatement.#ctor(Adam.JSGenerator.CompoundStatement,Adam.JSGenerator.IdentifierExpression,Adam.JSGenerator.CompoundStatement,Adam.JSGenerator.CompoundStatement)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.ExceptionHandlingStatement"/> for the specified try, catch and finally blocks.
            </summary>
            <param name="tryBlock">The try block of the statement.</param>
            <param name="catchVariable">The variable that contains the exception for the catch block.</param>
            <param name="catchBlock">The catch block of the statement.</param>
            <param name="finallyBlock">The finally block of the statement.</param>
        </member>
        <member name="M:Adam.JSGenerator.ExceptionHandlingStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.ExceptionHandlingStatement.TryBlock">
            <summary>
            Gets or sets the try block.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchVariable">
            <summary>
            Gets or sets the variable that will hold the exception for the catch block.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ExceptionHandlingStatement.CatchBlock">
            <summary>
            Gets or sets the catch block.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.ExceptionHandlingStatement.FinallyBlock">
            <summary>
            Gets or sets the finally block.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.CaseStatement">
            <summary>
            Defines a single case in a switch statement.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.CaseStatement.#ctor(Adam.JSGenerator.Statement[])">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.CaseStatement"/>.
            </summary>
            <param name="statements">An array of statemetns that run in this case.</param>
            <remarks>
            The case statement without a value is regarded as the 'default' statement and must come last in a <see cref="T:Adam.JSGenerator.SwitchStatement"/>.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.CaseStatement.#ctor(System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.CaseStatement"/>.
            </summary>
            <param name="statements">An array of statemetns that run in this case.</param>
            <remarks>
            The case statement without a value is regarded as the 'default' statement and must come last in a <see cref="T:Adam.JSGenerator.SwitchStatement"/>.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.CaseStatement.#ctor(Adam.JSGenerator.Expression,Adam.JSGenerator.Statement[])">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.CaseStatement"/>.
            </summary>
            <param name="value">The literal for which this case is used.</param>
            <param name="statements">An array of statements that run in this case.</param>
        </member>
        <member name="M:Adam.JSGenerator.CaseStatement.#ctor(Adam.JSGenerator.Expression,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.CaseStatement"/>.
            </summary>
            <param name="value">The literal for which this case is used.</param>
            <param name="statements">A sequence of statements that run in this case.</param>
        </member>
        <member name="M:Adam.JSGenerator.CaseStatement.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions)">
            <summary>
            Produces the Javascript and appends it to the StringBuilder passed in the builder argument.
            </summary>
            <param name="builder">The StringBuilder instance to append the Javascript to.</param>
            <param name="options">Specifies options to use while producing Javascript.</param>
        </member>
        <member name="P:Adam.JSGenerator.CaseStatement.Value">
            <summary>
            Gets or sets the value that this used in this case.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.CaseStatement.Statements">
            <summary>
            Gets or sets a list of statements that is run in this case.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.BooleanExpression">
            <summary>
            Represents a boolean value, inserted as a literal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.BooleanExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Adam.JSGenerator.BooleanExpression"/> for the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Adam.JSGenerator.BooleanExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="P:Adam.JSGenerator.BooleanExpression.Value">
            <summary>
            Gets or sets the value to be appended as a literal.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.Precedence">
            <summary>
            Defines the precedence of an operation.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.RequiresGrouping(Adam.JSGenerator.Precedence,Adam.JSGenerator.Association)">
            <summary>
            Indicates whether an expression with this precedence requires parentheses to protect its lower precedence level.
            </summary>
            <param name="against">The precedence to test against.</param>
            <param name="expected">The expected association.</param>
            <returns>True if parens are needed, otherwise false.</returns>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.Equals(Adam.JSGenerator.Precedence,Adam.JSGenerator.Precedence)">
            <summary>
            Determines whether the specified instances of <see cref="T:Adam.JSGenerator.Precedence"/> are considered equal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.Equals(Adam.JSGenerator.Precedence)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified <see cref="T:Adam.JSGenerator.Precedence"/> value.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified object.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.op_Equality(Adam.JSGenerator.Precedence,Adam.JSGenerator.Precedence)">
            <summary>
            Determines whether the specified instances of <see cref="T:Adam.JSGenerator.Precedence"/> are considered equal.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.Precedence.op_Inequality(Adam.JSGenerator.Precedence,Adam.JSGenerator.Precedence)">
            <summary>
            Determines whether the specified instances of <see cref="T:Adam.JSGenerator.Precedence"/> are considered not equal.
            </summary>
        </member>
        <member name="P:Adam.JSGenerator.Precedence.Level">
            <summary>
            Gets or sets the level of precedence of an operation. 
            </summary>
            <remarks>
            An operation with a higher value takes precedence over one with a lower value.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.Precedence.Association">
            <summary>
            Indicates the association of precedence.
            </summary>
            <remarks>
            Operations with equal precedence use association to determine precedence.
            </remarks>
        </member>
        <member name="P:Adam.JSGenerator.Precedence.Quarantine">
            <summary>
            Gets a precedence level that garuantees isolation in parentheses.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.IdentifierExpression">
            <summary>
            An expression that contains a valid identifier.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.IdentifierExpression.#ctor(System.String)">
            <summary>
            Creates a new IdentifierExpression instance that represents the identifier passed in the name argument.
            </summary>
            <param name="name">The name of the identifier.</param>
        </member>
        <member name="M:Adam.JSGenerator.IdentifierExpression.AppendScript(System.Text.StringBuilder,Adam.JSGenerator.ScriptOptions,System.Boolean)">
            <summary>
            Appends the script to represent this object to the StringBuilder.
            </summary>
            <param name="builder">The StringBuilder to which the Javascript is appended.</param>
            <param name="options">The options to use when appending JavaScript</param>
            <param name="allowReservedWords"></param>
        </member>
        <member name="M:Adam.JSGenerator.IdentifierExpression.op_Implicit(System.String)~Adam.JSGenerator.IdentifierExpression">
            <summary>
            Implicitly converts a string into an identifier.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The IdentifierExpression instance that represents the identifier passed in the name argument.</returns>
        </member>
        <member name="M:Adam.JSGenerator.IdentifierExpression.FromString(System.String)">
            <summary>
            Implicitly converts a string into an identifier.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The IdentifierExpression instance that represents the identifier passed in the name argument.</returns>
        </member>
        <member name="P:Adam.JSGenerator.IdentifierExpression.Name">
            <summary>
            Gets or sets the name of the identifier.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.WithStatementHelpers">
            <summary>
            Provides extension methods that create new instances of <see cref="T:Adam.JSGenerator.WithStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WithStatementHelpers.Do(Adam.JSGenerator.WithStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/> that copies the specified statement's expression, then adds statements to it.
            </summary>
            <param name="statement">The statement to copy the expression from.</param>
            <param name="statements">An array of statements to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.WithStatementHelpers.Do(Adam.JSGenerator.WithStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/> that copies the specified statement's expression, then adds statements to it.
            </summary>
            <param name="statement">The statement to copy the expression from.</param>
            <param name="statements">A sequence of statements to add to the new instance.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WithStatement"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.SwitchStatementHelpers">
            <summary>
            Provides extension methods to create instances of <see cref="T:Adam.JSGenerator.SwitchStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Default(Adam.JSGenerator.SwitchStatement)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, and adding a default case.
            </summary>
            <param name="statement">The statement to copy the cases from.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Case(Adam.JSGenerator.SwitchStatement,Adam.JSGenerator.Expression[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, and adding cases for all the literals in the specified array.
            </summary>
            <param name="statement">The statement to copy the cases from.</param>
            <param name="values">an array of literals for which to add cases.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Case(Adam.JSGenerator.SwitchStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Expression})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, and adding cases for all the literals in the specified sequence.
            </summary>
            <param name="statement">the statement to copy the cases from.</param>
            <param name="values">a sequence of literals for which to add cases.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>.</returns>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Break(Adam.JSGenerator.SwitchStatement)">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, replacing the last case with one that adds a break statement.
            </summary>
            <param name="statement">The switch statement to copy all cases from.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/></returns>
            <remarks>
            The specified instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> must already have at least one case for this method to succeed.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Do(Adam.JSGenerator.SwitchStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, replacing the last case with one that adds the specified statements.
            </summary>
            <param name="statement">The switch statement to copy all cases from.</param>
            <param name="statements">An array of statements to append to the last case.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/></returns>
            <remarks>
            The specified instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> must already have at least one case for this method to succeed.
            </remarks>
        </member>
        <member name="M:Adam.JSGenerator.SwitchStatementHelpers.Do(Adam.JSGenerator.SwitchStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/>, copying all the cases of the specified statement, replacing the last case with one that adds the specified statements.
            </summary>
            <param name="statement">The switch statement to copy all cases from.</param>
            <param name="statements">A sequence of statements to append to the last case.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/></returns>
            <remarks>
            The specified instance of <see cref="T:Adam.JSGenerator.SwitchStatement"/> must already have at least one case for this method to succeed.
            </remarks>
        </member>
        <member name="T:Adam.JSGenerator.ThisExpression">
            <summary>
            Represents the "this" keyword in JavaScript.
            </summary>
        </member>
        <member name="T:Adam.JSGenerator.WhileStatementHelpers">
            <summary>
            Provides extension methods to create new instances of <see cref="T:Adam.JSGenerator.WhileStatement"/>.
            </summary>
        </member>
        <member name="M:Adam.JSGenerator.WhileStatementHelpers.Do(Adam.JSGenerator.WhileStatement,System.Collections.Generic.IEnumerable{Adam.JSGenerator.Statement})">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/>, copying the specified statement's condition, and adding the specified sequence of statements to the body.
            </summary>
            <param name="statement">The statement to copy the condition from.</param>
            <param name="statements">A sequence of statements to add to the body.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/></returns>
        </member>
        <member name="M:Adam.JSGenerator.WhileStatementHelpers.Do(Adam.JSGenerator.WhileStatement,Adam.JSGenerator.Statement[])">
            <summary>
            Creates a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/>, copying the specified statement's condition, and adding the specified array of statements to the body.
            </summary>
            <param name="statement">The statement to copy the condition from.</param>
            <param name="statements">An array of statements to add to the body.</param>
            <returns>a new instance of <see cref="T:Adam.JSGenerator.WhileStatement"/></returns>
        </member>
        <member name="T:Adam.JSGenerator.CommentStyle">
            <summary>
            Determines how comments are rendered.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.CommentStyle.Auto">
            <summary>
            Automatically detect which ones are more appropriate.
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.CommentStyle.OneLineComments">
            <summary>
            Prefixes every line of text in the source with '// '
            </summary>
        </member>
        <member name="F:Adam.JSGenerator.CommentStyle.MultipleLineComments">
            <summary>
            Places the content of the comment between '/*' and '*/'.
            </summary>
        </member>
    </members>
</doc>
